//
//  PopularMoviesListInteractor.swift
//  Movs
//
//  Created by Tiago Chaves on 11/08/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PopularMoviesListBusinessLogic {
	func getPopularMovies(request: PopularMoviesList.GetPopularMovies.Request)
	func storeMovieId(request: PopularMoviesList.ShowMovieDetail.Request)
	func getGenres(request: PopularMoviesList.GetGenresList.Request)
}

protocol PopularMoviesListDataStore {
	var movie: Movie? { get set }
}

class PopularMoviesListInteractor: PopularMoviesListBusinessLogic, PopularMoviesListDataStore {
	
	var presenter: PopularMoviesListPresentationLogic?
	var worker: PopularMoviesListWorker?
	var movie: Movie?
	
	private var movies:[Movie] = []
	
	// MARK: - Get Popular Movies
	
	func getPopularMovies(request: PopularMoviesList.GetPopularMovies.Request) {
		
		worker = PopularMoviesListWorker(PopularMoviesNetworkWorker())
		worker?.getPopularMovies(request.page, completion: { (result, error) in

			var response:PopularMoviesList.GetPopularMovies.Response
			
			if error == nil {
				
				if let movies = result?.results {
					
					self.movies += movies
					
					let hasNextPage = result?.total_pages ?? 0 > request.page
					response = PopularMoviesList.GetPopularMovies.Response(movies: movies, hasNextPage: hasNextPage, error: nil)
				}else{
					
					response = PopularMoviesList.GetPopularMovies.Response(movies: [], hasNextPage: false, error: nil)
				}
			}else{
				
				response = PopularMoviesList.GetPopularMovies.Response(movies: nil, hasNextPage: true, error: error)
			}
			
			self.presenter?.presentPopularMovies(response: response)
		})
	}
	
	// MARK: - Show Movie Detail
	
	func storeMovieId(request: PopularMoviesList.ShowMovieDetail.Request) {
		
		self.movie = movies.filter { $0.id == request.movieId }.first
		
		let response = PopularMoviesList.ShowMovieDetail.Response()
		self.presenter?.presentMovieDetail(response: response)
	}
	
	// MARK: - Get Genre List
	
	var genreWorker: GenresWorker = GenresWorker(GenresNetworkWorker())
	
	func getGenres(request: PopularMoviesList.GetGenresList.Request) {
		
		genreWorker.getGenresList(completionHandler: { (genreData, error) in
			
			if error == nil, let genreData = genreData {
				
				Genre.add(genres: genreData)
			}
		})
	}
}
