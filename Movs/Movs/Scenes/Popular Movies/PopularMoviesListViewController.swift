//
//  PopularMoviesListViewController.swift
//  Movs
//
//  Created by Tiago Chaves on 11/08/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NVActivityIndicatorView

protocol PopularMoviesListDisplayLogic: class {
	func displayPopularMovies(viewModel: PopularMoviesList.GetPopularMovies.ViewModel)
	func displayMovieDetail(viewModel: PopularMoviesList.ShowMovieDetail.ViewModel)
}

class PopularMoviesListViewController: UIViewController, PopularMoviesListDisplayLogic, NVActivityIndicatorViewable {
	
	var interactor: PopularMoviesListBusinessLogic?
	var router: (NSObjectProtocol & PopularMoviesListRoutingLogic & PopularMoviesListDataPassing)?
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup() {
		
		let viewController = self
		let interactor = PopularMoviesListInteractor()
		let presenter = PopularMoviesListPresenter()
		let router = PopularMoviesListRouter()
		
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		
		if let scene = segue.identifier {
		
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad() {
		
		super.viewDidLoad()
		self.navigationController?.navigationBar.shadowImage = UIImage()
		
		getPopularMovies()
		getGenres()
	}
	
	// MARK: - Outlets & Vars
	
	@IBOutlet weak var searchBar: UISearchBar!
	@IBOutlet weak var collectionView: UICollectionView!
	
	let cellIdentifier = "MovieCell"
	var movies:[MovieViewModel] = []
	var nextPage = 1
	
	// MARK: - Get Popular Movies
	
	private func getPopularMovies() {
		
		let size = CGSize(width: 30, height: 30)
		startAnimating(size, message: "Fetching movies...", type: .ballRotateChase, fadeInAnimation: nil)
		
		let request = PopularMoviesList.GetPopularMovies.Request(page: nextPage)
		interactor?.getPopularMovies(request: request)
	}
	
	func displayPopularMovies(viewModel: PopularMoviesList.GetPopularMovies.ViewModel) {
		
		DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.5) {
			self.stopAnimating(nil)
		}
		
		if viewModel.error == nil, let movies = viewModel.movies {
			
			nextPage += 1
			self.movies += movies
			
			DispatchQueue.main.async {
				self.collectionView.reloadData()
			}
		}else{
			
			let errorView = ErrorView(forView: collectionView, withMessage: "Um erro ocorreu. Por favor, tente novamente.")
			
			DispatchQueue.main.async {
				self.collectionView.addSubview(errorView)
			}
		}
	}
	
	// MARK: - Show Movie Detail
	
	func displayMovieDetail(viewModel: PopularMoviesList.ShowMovieDetail.ViewModel) {
		
		self.performSegue(withIdentifier: "MovieDetail", sender: nil)
	}
	
	// MARK: - Get Genres
	
	private func getGenres() {
		
		let request = PopularMoviesList.GetGenresList.Request()
		self.interactor?.getGenres(request: request)
	}
}

extension PopularMoviesListViewController: UICollectionViewDelegate, UICollectionViewDataSource {
	
	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return movies.count
	}
	
	func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		
		let movie = movies[indexPath.row]
		
		if let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellIdentifier, for: indexPath) as? MovieCollectionViewCell {
			
			cell.config(withMovie: movie)			
			return cell
		}
		
		return UICollectionViewCell()
	}
	
	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		
		let cell = collectionView.cellForItem(at: indexPath)
		cell?.isSelected = false
		
		let movie = movies[indexPath.row]
		
		let request = PopularMoviesList.ShowMovieDetail.Request(movieId: movie.id)
		self.interactor?.storeMovie(request: request)
	}
}
