//
//  FavoriteMoviesViewController.swift
//  Movs
//
//  Created by Tiago Chaves on 15/08/19.
//  Copyright (c) 2019 Tiago Chaves. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavoriteMoviesDisplayLogic: class {
	func displayFavoriteMovies(viewModel: FavoriteMovies.GetFavoriteMovies.ViewModel)
}

class FavoriteMoviesViewController: UIViewController, FavoriteMoviesDisplayLogic {
	
	var interactor: FavoriteMoviesBusinessLogic?
	var router: (NSObjectProtocol & FavoriteMoviesRoutingLogic & FavoriteMoviesDataPassing)?
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder) {
		
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup() {
		
		let viewController = self
		let interactor = FavoriteMoviesInteractor()
		let presenter = FavoriteMoviesPresenter()
		let router = FavoriteMoviesRouter()
		
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
		
		if let scene = segue.identifier {
		
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad() {
		
		super.viewDidLoad()
	}
	
	override func viewWillAppear(_ animated: Bool) {
		
		super.viewWillAppear(animated)
		
		getFavoriteMovies()
	}
	
	// MARK: - Outlets & Vars
	
	@IBOutlet weak var tableView: UITableView!
	
	let cellIdentifier = "FavoriteMovieCell"
	var favoriteMovies:[FavoriteMovieViewModel] = []
	
	// MARK: - Get Favorite Movies
	
	private func getFavoriteMovies() {
		
		favoriteMovies = []
		
		interactor?.getFavoriteMovies(request: FavoriteMovies.GetFavoriteMovies.Request())
	}
	
	func displayFavoriteMovies(viewModel: FavoriteMovies.GetFavoriteMovies.ViewModel) {
		
		if viewModel.error == nil {
			
			self.favoriteMovies = viewModel.favoriteMovies ?? []
			
			DispatchQueue.main.async {
				self.tableView.reloadData()
			}
		} else {
			
			DispatchQueue.main.async {
			
				self.view.layoutIfNeeded()
				let errorView = ErrorView(forView: self.tableView, withMessage: "Um erro ocorreu. Por favor, tente novamente.")
				errorView.tag = 99
				self.tableView.addSubview(errorView)
			}
		}
	}
	
}

extension FavoriteMoviesViewController: UITableViewDelegate, UITableViewDataSource {
	
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return favoriteMovies.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		
		let movie = favoriteMovies[indexPath.row]
		
		if let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as? FavoriteMovieTableViewCell {
			
			cell.config(withMovie: movie)
			return cell
		}
		
		return UITableViewCell()
	}
	
	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		
//		let cell = collectionView.cellForItem(at: indexPath)
//		cell?.isSelected = false
//		
//		let movie = movies[indexPath.row]
//		
//		let request = PopularMoviesList.ShowMovieDetail.Request(movieId: movie.id)
//		self.interactor?.storeMovie(request: request)
//		
//		
//		let id = favoriteMovies[indexPath.row].id ?? 0
//		
//		interactor?.unfavoriteMovie(request: FavoriteMovies.UnfavoriteMovie.Request(id: id))
	}
}
